"""Utilities."""
import os
import re
import subprocess
from typing import Any, Dict, List

import requests
from loguru import logger
from requests import Response

from src.config import RevancedConfig
from src.exceptions import DownloadFailure

default_build = [
    "youtube",
    "youtube_music",
]
possible_archs = ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
apk_mirror_base_url = "https://www.apkmirror.com"
request_header = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (HTML, like Gecko)"
    " Chrome/96.0.4664.93 Safari/537.36",
    "Authorization": "Basic YXBpLWFwa3VwZGF0ZXI6cm01cmNmcnVVakt5MDRzTXB5TVBKWFc4",
    "Content-Type": "application/json",
}
bs4_parser = "html.parser"


def update_changelog(name: str, response: Dict[str, str]) -> None:
    """The function `update_changelog` updates the changelog file with the
    provided name and response.

    Parameters
    ----------
    name : str
        A string representing the name of the change or update.
    response : Dict[str, str]
        The `response` parameter is a dictionary that contains information about the changes made. The keys
    in the dictionary represent the type of change (e.g., "bug fix", "feature", "documentation"), and
    the values represent the specific changes made for each type.
    """
    parent_repo = get_parent_repo()
    change_log = format_changelog(name, response, parent_repo)
    write_to_file(change_log)


def format_changelog(name: str, response: Dict[str, str], parent_repo: str) -> str:
    """The `format_changelog` function takes in a name, a response dictionary,
    and a parent repository, and returns a formatted changelog string.

    Parameters
    ----------
    name : str
        The `name` parameter is a string that represents the name of the changelog. It is used to create a
    collapsible section in the formatted changelog.
    response : Dict[str, str]
        The `response` parameter is a dictionary that contains information about a release. It has the
    following keys:
    parent_repo : str
        The `parent_repo` parameter is a string that represents the URL or name of the parent repository.
    It is used to generate a footer in the formatted changelog, indicating that the changelogs were
    generated by a specific tool or script.

    Returns
    -------
        a formatted changelog as a string.
    """
    collapse_start = f"\n<details> <summary>ðŸ‘€ {name} </summary>\n\n"
    release_version = (
        f"**Release Version** - [{response['tag_name']}]({response['html_url']})<br>"
    )
    change_log = f"**Changelog** -<br> {response['body']}"
    publish_time = f"**Published at** -<br> {response['published_at']}"
    footer = (
        f"<br><sub>Change logs generated by [Docker Py Revanced]({parent_repo})</sub>\n"
    )
    collapse_end = "</details>"
    return "".join(
        [
            collapse_start,
            release_version,
            change_log,
            publish_time,
            footer,
            collapse_end,
        ]
    )


def write_to_file(change_log: str) -> None:
    """The function `write_to_file` writes a given changelog string to a file
    named "changelog.md".

    Parameters
    ----------
    change_log : str
        A string representing the changelog that you want to write to the file.
    """
    with open("changelog.md", "w", encoding="utf_8") as file1:
        file1.write(change_log)


def get_parent_repo() -> str:
    """The function `get_parent_repo()` returns the URL of the parent
    repository.

    Returns
    -------
        the URL of the parent repository, which is "https://github.com/nikhilbadyal/docker-py-revanced".
    """
    return "https://github.com/nikhilbadyal/docker-py-revanced"


def handle_request_response(response: Response) -> None:
    """The function handles the response of a GET request and raises an
    exception if the response code is not 200.

    Parameters
    ----------
    response : Response
        The parameter `response` is of type `Response`, which is likely referring to a response object from
    an HTTP request. This object typically contains information about the response received from the
    server, such as the status code, headers, and response body.
    """
    response_code = response.status_code
    if response_code != 200:
        raise DownloadFailure(f"Unable to downloaded assets. Reason - {response.text}")


def slugify(string: str) -> str:
    """The `slugify` function converts a string to a slug format by converting
    it to lowercase, removing special characters, replacing spaces with dashes,
    removing consecutive dashes, and removing leading and trailing dashes.

    Parameters
    ----------
    string : str
        The `string` parameter is a string that you want to convert to a slug format.

    Returns
    -------
        The function `slugify` returns a modified version of the input string in slug format.
    """
    # Convert to lowercase
    modified_string = string.lower()

    # Remove special characters
    modified_string = re.sub(r"[^\w\s-]", "", modified_string)

    # Replace spaces with dashes
    modified_string = re.sub(r"\s+", "-", modified_string)

    # Remove consecutive dashes
    modified_string = re.sub(r"-+", "-", modified_string)

    # Remove leading and trailing dashes
    modified_string = modified_string.strip("-")

    return modified_string


def check_java(dry_run: bool) -> None:
    """The function `check_java` checks if Java version 17 or higher is
    installed and logs an error message if it is not.

    Parameters
    ----------
    dry_run : bool
        The `dry_run` parameter is a boolean flag that determines whether the function should actually
    check if Java is installed or just simulate the check. If `dry_run` is `True`, the function will
    return without performing the check. If `dry_run` is `False`, the function will execute the

    Returns
    -------
        The function `check_java` does not return any value. It has a return type annotation of `None`,
    indicating that it does not return anything.
    """
    try:
        if dry_run:
            return
        jd = subprocess.check_output(
            ["java", "-version"], stderr=subprocess.STDOUT
        ).decode("utf-8")
        jd = jd[1:-1]
        if "Runtime Environment" not in jd:
            raise subprocess.CalledProcessError(-1, "java -version")
        if "17" not in jd and "20" not in jd:
            raise subprocess.CalledProcessError(-1, "java -version")
        logger.debug("Cool!! Java is available")
    except subprocess.CalledProcessError:
        logger.error("Java>= 17 must be installed")
        exit(-1)


def extra_downloads(config: RevancedConfig) -> None:
    """The function `extra_downloads` downloads extra files specified in the
    `config` object using the `APP.download` method.

    Parameters
    ----------
    config : RevancedConfig
        The `config` parameter is an instance of the `RevancedConfig` class. It is used to provide
    configuration settings for the download process.
    """
    from src.app import APP

    try:
        for extra in config.extra_download_files:
            url, file_name = extra.split("@")
            file_name_without_extension, file_extension = os.path.splitext(file_name)
            new_file_name = f"{file_name_without_extension}-output{file_extension}"
            APP.download(
                url,
                config,
                assets_filter=f".*{file_extension}",
                file_name=new_file_name,
            )
    except (ValueError, IndexError):
        logger.info(
            "Unable to download extra file. Provide input in url@name.apk format."
        )


def apkmirror_status_check(package_name: str) -> Any:
    """The `apkmirror_status_check` function checks if an app exists on
    APKMirror by making a POST request to the APKMirror API with the package
    name as a parameter.

    Parameters
    ----------
    package_name : str
        The `package_name` parameter is a string that represents the name of the app package to check on
    APKMirror.

    Returns
    -------
        the response from the APKMirror API as a JSON object.
    """
    api_url = f"{apk_mirror_base_url}/wp-json/apkm/v1/app_exists/"
    body = {"pnames": [package_name]}
    response = requests.post(api_url, json=body, headers=request_header)
    return response.json()


def contains_any_word(string: str, words: List[str]) -> bool:
    return any(word in string for word in words)
